# -*- coding: utf-8 -*-
"""FractalH_runcodes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OaG-wjNgrh7comUmQ7-KXhI80q1iZyOO
"""

def celula_vazio(tamanho):
    return [[' ' for _ in range(tamanho)] for _ in range(tamanho)]

def H_tree(matrix, x, y, tamanho, level):
    if level == 0:
        return

    metade_tamanho = tamanho // 2
    reduz_level = level - 1

    # desenho barras horizontais do H
    for i in range(x - metade_tamanho, x + metade_tamanho):
        matrix[y][i] = 'H'

    # desenho barras verticais do H
    for i in range(y - metade_tamanho, y + metade_tamanho):
        matrix[i][x - metade_tamanho] = 'H'
        matrix[i][x + metade_tamanho] = 'H'

    # Recurs√£o das H-Trees menores
    H_tree(matrix, x - metade_tamanho, y - metade_tamanho, metade_tamanho, reduz_level)
    H_tree(matrix, x - metade_tamanho, y + metade_tamanho, metade_tamanho, reduz_level)
    H_tree(matrix, x + metade_tamanho, y - metade_tamanho, metade_tamanho, reduz_level)
    H_tree(matrix, x + metade_tamanho, y + metade_tamanho, metade_tamanho, reduz_level)

def print_matrix(matrix):
    for row in matrix:
        print(''.join(row))

if __name__ == "__main__":
    size = 128
    matrix = celula_vazio(size)
    x, y = size // 2, size // 2  # Centro da matriz
    input_usuario = int(input().strip())

    level = input_usuario + 1
    H_tree(matrix, x, y, size // 2, level)
    print_matrix(matrix)