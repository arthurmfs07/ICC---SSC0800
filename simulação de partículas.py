# -*- coding: utf-8 -*-
"""particulas_envio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_cxVZuMVhn0ymEql5tiX92LoZkckklEw
"""

def processando_input(input_str):
    frame, *block = input_str.split(":")
    frame = int(frame)
    x, y, block_type = map(str.strip, block[0].split())
    return [frame, (int(x), int(y), block_type)]


def determinar_posições(block, x, y):
    directions = {
        "~": lambda: [(x, y+1), (x-1, y+1), (x+1, y+1), (x-1, y), (x+1, y)],
        "#": lambda: [(x, y+1), (x-1, y+1), (x+1, y+1)]
    }
    return directions.get(block, lambda: None)()

def agua(x, y, matrix, matrix_copy):
    block1 = matrix_copy[y][x]
    positions = determinar_posições(block1, x, y)

    for novo_x, novo_y in positions:
        if 0 <= novo_y < len(matrix_copy) and 0 <= novo_x < len(matrix_copy[y]):
            block2 = matrix_copy[novo_y][novo_x]
            if block2 == " ":
                matrix[y][x], matrix[novo_y][novo_x] = matrix[novo_y][novo_x], matrix[y][x]
                break

def areia(x, y, matrix, matrix_copy):
    block1 = matrix_copy[y][x]
    positions = determinar_posições(block1, x, y)

    for novo_x, novo_y in positions:
        if 0 <= novo_y < len(matrix_copy) and 0 <= novo_x < len(matrix_copy[y]):
            block2 = matrix_copy[novo_y][novo_x]
            if block2 == " " or block2 == "~":
                matrix[y][x], matrix[novo_y][novo_x] = matrix[novo_y][novo_x], matrix[y][x]
                break

def update_fisica(matrix):
    matrix_copy = [row[:] for row in matrix]

    for y, row in enumerate(matrix_copy):
        for x, _ in enumerate(row):
            if matrix_copy[y][x] == "#":
                areia(x, y, matrix, matrix_copy)
            elif matrix_copy[y][x] == "~":
                agua(x, y, matrix, matrix_copy)

def print_screen(matrix, frame):
    print("frame:", frame + 1)
    for row in matrix:
        print("".join(row))


def main():
    width = 64
    height = 32
    matrix = [width * [" "] for _ in range(height)]

    num_frames = int(input())
    current_frame = 0
    finished = False
    frame = 0

    while current_frame < num_frames:
        try:
            input_data = input()
            frame, block_data = processando_input(input_data)
            x, y, block_type = block_data
        except EOFError:
            finished = True
        finally:
            if not finished:
                if frame == current_frame:
                    matrix[y][x] = block_type
                else:
                    print_screen(matrix, current_frame)
                    update_fisica(matrix)
                    matrix[y][x] = block_type
                    current_frame += 1
            else:
                print_screen(matrix, current_frame)
                update_fisica(matrix)
                current_frame += 1

if __name__ == "__main__":
    main()